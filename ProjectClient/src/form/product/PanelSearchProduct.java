/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.product;

import communication.Communication;
import constants.Operation;
import domain.Manufacturer;
import domain.Product;
import domain.Type;
import form.FormMode;
import form.components.IMyForm;
import form.order.PanelNewOrderItem;
import form.product.model.TableModelProduct;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import logic.Controler;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author Rados
 */
public class PanelSearchProduct extends javax.swing.JPanel {

    private JDialog ancestor;
    ButtonGroup buttonGroup;
    private TableModelProduct modelSearchProduct;

    /**
     * Creates new form PanelSearchProduct
     *
     * @param ancestor
     */
    public PanelSearchProduct(JDialog ancestor) {
        initComponents();
        this.ancestor = ancestor;
        prepateTable();
        prepareOptions();
        requestManufacturers();
        requestTypes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        lblCriterionValue = new javax.swing.JLabel();
        txtCriterionValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchProducts = new javax.swing.JTable();
        lblChooseCriterion = new javax.swing.JLabel();
        rbProductCode = new javax.swing.JRadioButton();
        lblChoose = new javax.swing.JLabel();
        rbModel = new javax.swing.JRadioButton();
        rbAll = new javax.swing.JRadioButton();
        rbManufacturer = new javax.swing.JRadioButton();
        btnCancel = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        cmbTypes = new javax.swing.JComboBox();
        rbType = new javax.swing.JRadioButton();
        cmbManufacturers = new javax.swing.JComboBox();
        cmbMemory = new javax.swing.JComboBox();
        rbMemory = new javax.swing.JRadioButton();
        rbPriceFrom = new javax.swing.JRadioButton();
        rbPriceTo = new javax.swing.JRadioButton();
        btnChoose = new javax.swing.JButton();

        lblCriterionValue.setText("Vrednost kriterijuma:");

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblSearchProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblSearchProducts);

        lblChooseCriterion.setText("Ili odaberi kriterijum za pretragu:");

        buttonGroup1.add(rbProductCode);
        rbProductCode.setText("Šifra proizvoda");
        rbProductCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbProductCodeActionPerformed(evt);
            }
        });

        lblChoose.setText("Odaberi:");

        buttonGroup1.add(rbModel);
        rbModel.setText("Model");
        rbModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbModelActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbAll);
        rbAll.setText("prikaži sve");
        rbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbManufacturer);
        rbManufacturer.setText("Proizvođač");
        rbManufacturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbManufacturerActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDetails.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        cmbTypes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonGroup1.add(rbType);
        rbType.setText("Vrsta");
        rbType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTypeActionPerformed(evt);
            }
        });

        cmbManufacturers.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbMemory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonGroup1.add(rbMemory);
        rbMemory.setText("Memorija:");
        rbMemory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMemoryActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPriceFrom);
        rbPriceFrom.setText("Cena od");
        rbPriceFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPriceFromActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbPriceTo);
        rbPriceTo.setText("Cena do");
        rbPriceTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPriceToActionPerformed(evt);
            }
        });

        btnChoose.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnChoose.setText("Izaberi");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(rbType)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbTypes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(rbManufacturer, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(rbAll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rbProductCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(rbModel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblCriterionValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lblChoose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(lblChooseCriterion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(21, 21, 21))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCriterionValue)
                                .addGap(25, 25, 25))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(rbMemory)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbMemory, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(rbPriceFrom)
                                    .addComponent(rbPriceTo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnChoose)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblChoose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbAll)
                        .addGap(9, 9, 9)
                        .addComponent(lblChooseCriterion)
                        .addGap(18, 18, 18)
                        .addComponent(rbProductCode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbModel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbManufacturer)
                            .addComponent(cmbManufacturers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbType)
                            .addComponent(cmbTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbMemory)
                            .addComponent(cmbMemory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbPriceFrom)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbPriceTo)
                        .addGap(18, 18, 18)
                        .addComponent(lblCriterionValue)
                        .addGap(18, 18, 18)
                        .addComponent(txtCriterionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel)
                            .addComponent(btnSearch)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetails)
                    .addComponent(btnChoose))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String criterion = getCriterion();
            ClientRequest cr = new ClientRequest();

            if (Session.getInstance().getCurrentUseCase().equals("Search products")) {
                Session.getInstance().getUseCaseParams().put("request product", "PanelSearchProduct");
            }
            if (Session.getInstance().getCurrentUseCase().equals("Select product")) {
                Session.getInstance().getUseCaseParams().put("request product", "PanelSelectProduct");
            }

            if (criterion.equals("")) {
                cr.setOperation(Operation.GET_ALL_PRODUCTS);
            } else {
                cr.setOperation(Operation.SEARCH_PRODUCTS);
                cr.setParameter(criterion);
            }
            Communication.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void rbProductCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbProductCodeActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbProductCodeActionPerformed

    private void rbModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbModelActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbModelActionPerformed

    private void rbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbAllActionPerformed

    private void rbManufacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbManufacturerActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbManufacturers.setEnabled(true);
        cmbTypes.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbManufacturerActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Controler.getInstance().setActiveWindow((Window) ancestor.getParent());
        Controler.getInstance().getFormMain().setPanelSearchProduct(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Product product = modelSearchProduct.getProduct(selectedRow);

            Session.getInstance().getUseCaseParams().put("product", product);

            JDialog dialog = new JDialog(ancestor, true);
            Controler.getInstance().setActiveWindow(dialog);

            PanelProduct panelProduct = new PanelProduct(FormMode.VIEW, dialog);

            dialog.add(panelProduct);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void rbTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTypeActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbTypes.setEnabled(true);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbTypeActionPerformed

    private void rbMemoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMemoryActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(true);
    }//GEN-LAST:event_rbMemoryActionPerformed

    private void rbPriceFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPriceFromActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbPriceFromActionPerformed

    private void rbPriceToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPriceToActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbTypes.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbMemory.setEnabled(false);
    }//GEN-LAST:event_rbPriceToActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Product product = modelSearchProduct.getProduct(selectedRow);

            IMyForm imf = Controler.getInstance().getCurrentForm();
            PanelNewOrderItem panel = (PanelNewOrderItem) Session.getInstance().getUseCaseParams().get("panelNewOrderItem");

            Session.getInstance().getUseCaseParams().put("selectedProduct", product);

            panel.fillProduct(product);

            ((JDialog) Controler.getInstance().getCurrentForm()).dispose();
            //Controler.getInstance().setCurrentForm(null);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbManufacturers;
    private javax.swing.JComboBox cmbMemory;
    private javax.swing.JComboBox cmbTypes;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChoose;
    private javax.swing.JLabel lblChooseCriterion;
    private javax.swing.JLabel lblCriterionValue;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbManufacturer;
    private javax.swing.JRadioButton rbMemory;
    private javax.swing.JRadioButton rbModel;
    private javax.swing.JRadioButton rbPriceFrom;
    private javax.swing.JRadioButton rbPriceTo;
    private javax.swing.JRadioButton rbProductCode;
    private javax.swing.JRadioButton rbType;
    private javax.swing.JTable tblSearchProducts;
    private javax.swing.JTextField txtCriterionValue;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelProduct getModelSearchProduct() {
        return modelSearchProduct;
    }

    public void setModelSearchProduct(TableModelProduct modelSearchProduct) {
        this.modelSearchProduct = modelSearchProduct;
    }

    private void requestManufacturers() {
        ClientRequest cr = new ClientRequest();
        if (Session.getInstance().getCurrentUseCase().equals("Search products")) {
             Session.getInstance().getUseCaseParams().put("request manufacturer", "PanelSearchProduct");
        }
        if (Session.getInstance().getCurrentUseCase().equals("Select product")) {
            Session.getInstance().getUseCaseParams().put("request manufacturer", "PanelSelectProduct");
        }
        cr.setOperation(Operation.GET_ALL_MANUFACTURERS);
        Communication.getInstance().sendRequest(cr);
    }

    public void populateCMBManufacturers(ArrayList<Manufacturer> manufacturers) {
        cmbManufacturers.removeAllItems();
        for (Manufacturer m : manufacturers) {
            cmbManufacturers.addItem(m);
        }
    }

    public ArrayList<Manufacturer> getManufacturersFromCMB() {
        ArrayList<Manufacturer> list = new ArrayList<>();
        for (int i = 0; i < cmbManufacturers.getItemCount(); i++) {
            Manufacturer m = (Manufacturer) cmbManufacturers.getItemAt(i);
            list.add(m);
        }
        System.out.println(list);
        return list;
    }

    private void requestTypes() {
        ClientRequest cr = new ClientRequest();
        if (Session.getInstance().getCurrentUseCase().equals("Search products")) {
             Session.getInstance().getUseCaseParams().put("request type", "PanelSearchProduct");
        }
        if (Session.getInstance().getCurrentUseCase().equals("Select product")) {
            Session.getInstance().getUseCaseParams().put("request type", "PanelSelectProduct");
        }
        cr.setOperation(Operation.GET_ALL_TYPES);
        Communication.getInstance().sendRequest(cr);
    }

    public void populateCMBTypes(ArrayList<Type> types) {
        cmbTypes.removeAllItems();
        for (Type t : types) {
            cmbTypes.addItem(t);
        }
    }

    public ArrayList<Type> getTypesFromCMB() {
        ArrayList<Type> list = new ArrayList<>();
        for (int i = 0; i < cmbTypes.getItemCount(); i++) {
            Type t = (Type) cmbTypes.getItemAt(i);
            list.add(t);
        }
        System.out.println(list);
        return list;
    }

    private String getCriterion() throws Exception {
        String criterion = "";
        if (!rbAll.isSelected()) {
            String criterionName = "";
            String criterionValue = "";

            if (!rbManufacturer.isSelected() && !rbType.isSelected() && !rbMemory.isSelected()) {
                criterionValue = txtCriterionValue.getText();
                if (criterionValue == null || criterionValue.equals("")) {
                    throw new Exception("Nije unet kriterijum pretrage");
                }
                if (rbProductCode.isSelected()) {
                    validateProductCode(criterionValue);
                    criterionName = "p.productCode";
                    criterionValue = " LIKE '%" + criterionValue + "%'";
                }
                if (rbModel.isSelected()) {
                    criterionName = "LOWER(p.model)";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";
                }
                if (rbPriceFrom.isSelected()) {
                    criterionName = "p.price";
                    criterionValue = " >" + Integer.parseInt(criterionValue);
                }
                if (rbPriceTo.isSelected()) {
                    criterionName = "p.price";
                    criterionValue = " <" + Integer.parseInt(criterionValue);
                }
            } else {
                if (rbManufacturer.isSelected()) {
                    criterionName = "p.manufacturerID";
                    Manufacturer m = (Manufacturer) cmbManufacturers.getSelectedItem();
                    validationManufacturer(m);
                    criterionValue = " = '" + m.getManufacturerID() + "'";
                }
                if (rbType.isSelected()) {
                    criterionName = "a.typeID";
                    Type t = (Type) cmbTypes.getSelectedItem();
                    validationType(t);
                    criterionValue = " = '" + t.getTypeID() + "'";
                }
                if (rbMemory.isSelected()) {
                    criterionName = "m.memory";
                    int memory = (int) cmbMemory.getSelectedItem();
                    validationMemory(memory);
                    criterionValue = " = '" + memory + "'";
                }
            }
            criterion = criterionName + criterionValue;
        }
        return criterion;
    }

    private int getSelectedRow() throws Exception {
        int selectedRow = tblSearchProducts.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Please, select row");
            throw new Exception("Niste selektovali proizvod.");
        }
        return selectedRow;
    }

    private void prepateTable() {
        fillCMBMemory();
        ArrayList<Product> list = new ArrayList<>();
        modelSearchProduct = new TableModelProduct(list);
        tblSearchProducts.setModel(modelSearchProduct);

        for (int i = modelSearchProduct.getColumnCount() - 1; i >= 0; i--) {
            TableColumn column = tblSearchProducts.getColumnModel().getColumn(i);
            switch (i) {
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(105);
                    break;
                case 2:
                    column.setPreferredWidth(65);
                    break;
                case 3:
                    column.setPreferredWidth(100);
                    break;
            }
        }
    }

    private void prepareOptions() {
        rbAll.setSelected(true);
        txtCriterionValue.setEnabled(false);
        cmbManufacturers.setEnabled(false);
        cmbTypes.setEnabled(false);
        cmbMemory.setEnabled(false);
        btnChoose.setVisible(false);
    }

    public void setListForModelSearchProduct(ArrayList<Product> products) {
        modelSearchProduct.setProducts(products);

        if (!modelSearchProduct.getProducts().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pronađena je lista proizvoda!",
                    "Status", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Proizvod nije pronađen za zadati kriterijum!",
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void validationManufacturer(Manufacturer m) throws Exception {
        if (m == null) {
            throw new Exception("Niste odabrali proizvođača");
        }
    }

    private void validationType(Type t) throws Exception {
        if (t == null) {
            throw new Exception("Niste odabrali vrstu");
        }
    }

    private void validateProductCode(String criterionValue) throws Exception {
        if (criterionValue.length() != 8) {
            throw new Exception("Šifra proizvoda mora imati 8 znakova!");
        } else {
            String pruductCode = criterionValue;
            int counter = 0;
            for (int i = 0; i < pruductCode.length(); i++) {
                if (Character.isDigit(pruductCode.charAt(i))) {
                    counter++;
                }
            }
            if (counter == 0) {
                throw new Exception("Šifra proizvoda mora sadržati barem jedan broj!");
            }
        }
    }

    private void fillCMBMemory() {
        cmbMemory.removeAllItems();
        for (int i = 2; i <= 1024; i = i * 2) {
            cmbMemory.addItem(i);
        }
    }

    private void validationMemory(int memory) throws Exception {
        if (memory == 0) {
            throw new Exception("Niste odabrali količinu memorije");
        }
    }

    public void setBtn() {
        btnChoose.setVisible(true);
        btnDetails.setVisible(false);
    }
}

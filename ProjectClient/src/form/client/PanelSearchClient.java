/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.client;

import communication.Communication;
import constants.Operation;
import domain.City;
import domain.Client;
import form.FormMode;
import form.client.model.TableModelClient;
import form.components.IMyForm;
import form.order.PanelNewOrder;
import form.order.PanelOrders;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.ButtonGroup;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import logic.Controler;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author Rados
 */
public class PanelSearchClient extends javax.swing.JPanel {

    private JDialog ancestor;
    ButtonGroup buttonGroup;
    private TableModelClient modelSearchClient;

    /**
     * Creates new form PanelSearchClient
     *
     * @param ancestor
     */
    public PanelSearchClient(JDialog ancestor) {
        initComponents();
        this.ancestor = ancestor;
        prepareTable();
        prepareOptions();
        requestCities();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rbAdress = new javax.swing.JRadioButton();
        rbAll = new javax.swing.JRadioButton();
        rbCity = new javax.swing.JRadioButton();
        lblCriterionValue = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        txtCriterionValue = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSearchClients = new javax.swing.JTable();
        cmbCities = new javax.swing.JComboBox();
        lblChooseCriterion = new javax.swing.JLabel();
        rbIDNumber = new javax.swing.JRadioButton();
        lblChoose = new javax.swing.JLabel();
        rbEmail = new javax.swing.JRadioButton();
        rbTelephone = new javax.swing.JRadioButton();
        btnDetails = new javax.swing.JButton();
        rbCompanyName = new javax.swing.JRadioButton();
        rbCompanyRegistrationNumber = new javax.swing.JRadioButton();
        rbClientCode = new javax.swing.JRadioButton();
        btnChoose = new javax.swing.JButton();

        buttonGroup1.add(rbAdress);
        rbAdress.setText("Adresa");
        rbAdress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAdressActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbAll);
        rbAll.setText("prikaži sve");
        rbAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbAllActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbCity);
        rbCity.setText("Grad");
        rbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCityActionPerformed(evt);
            }
        });

        lblCriterionValue.setText("Vrednost kriterijuma:");

        btnCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblSearchClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblSearchClients);

        cmbCities.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblChooseCriterion.setText("Ili odaberi kriterijum za pretragu:");

        buttonGroup1.add(rbIDNumber);
        rbIDNumber.setText("Broj lične karte");
        rbIDNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbIDNumberActionPerformed(evt);
            }
        });

        lblChoose.setText("Odaberi:");

        buttonGroup1.add(rbEmail);
        rbEmail.setText("Email");
        rbEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEmailActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbTelephone);
        rbTelephone.setText("Telefon");
        rbTelephone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbTelephoneActionPerformed(evt);
            }
        });

        btnDetails.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbCompanyName);
        rbCompanyName.setText("Ime kompanije");
        rbCompanyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCompanyNameActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbCompanyRegistrationNumber);
        rbCompanyRegistrationNumber.setText("Registracioni broj kompanije");
        rbCompanyRegistrationNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCompanyRegistrationNumberActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbClientCode);
        rbClientCode.setText("Šifra naručioca");
        rbClientCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClientCodeActionPerformed(evt);
            }
        });

        btnChoose.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnChoose.setText("Izaberi");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rbCity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbCities, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(rbIDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbCompanyRegistrationNumber)
                            .addComponent(rbTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbEmail)
                            .addComponent(rbAdress)
                            .addComponent(rbCompanyName)
                            .addComponent(rbClientCode)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbAll, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChooseCriterion, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnChoose)
                .addGap(18, 18, 18)
                .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblCriterionValue)
                        .addComponent(txtCriterionValue, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(lblChoose)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblChooseCriterion)
                .addGap(6, 6, 6)
                .addComponent(rbClientCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbIDNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbCompanyRegistrationNumber)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbCompanyName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rbTelephone)
                        .addGap(37, 37, 37))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbCity)
                            .addComponent(cmbCities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(rbAdress)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbEmail)
                .addGap(120, 120, 120))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetails)
                    .addComponent(btnSearch)
                    .addComponent(btnChoose))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(344, 344, 344)
                    .addComponent(lblCriterionValue)
                    .addGap(18, 18, 18)
                    .addComponent(txtCriterionValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(btnCancel)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rbAdressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAdressActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbAdressActionPerformed

    private void rbAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbAllActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbAllActionPerformed

    private void rbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCityActionPerformed
        txtCriterionValue.setEnabled(false);
        cmbCities.setEnabled(true);
    }//GEN-LAST:event_rbCityActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Controler.getInstance().setActiveWindow((Window) ancestor.getParent());
        Controler.getInstance().getFormMain().setPanelSearchProduct(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String criterion = getCriterion();
            ClientRequest cr = new ClientRequest();

            if (Session.getInstance().getCurrentUseCase().equals("Search clients")) {
                Session.getInstance().getUseCaseParams().put("request client", "PanelSearchClient");
            }
            if (Session.getInstance().getCurrentUseCase().equals("Select client")) {
                Session.getInstance().getUseCaseParams().put("request client", "PanelSelectClient");;
            }

            if (criterion.equals("")) {
                cr.setOperation(Operation.GET_ALL_CLIENTS);
            } else {
                cr.setOperation(Operation.SEARCH_CLIENTS);
                cr.setParameter(criterion);
            }
            Communication.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void rbIDNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbIDNumberActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbIDNumberActionPerformed

    private void rbEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEmailActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbEmailActionPerformed

    private void rbTelephoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbTelephoneActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbTelephoneActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Client client = modelSearchClient.getClient(selectedRow);
            Session.getInstance().getUseCaseParams().put("client", client);

            JDialog dialog = new JDialog(ancestor, true);
            Controler.getInstance().setActiveWindow(dialog);

            PanelClient panelClient = new PanelClient(FormMode.VIEW, dialog);

            dialog.add(panelClient);
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void rbClientCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClientCodeActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbClientCodeActionPerformed

    private void rbCompanyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCompanyNameActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbCompanyNameActionPerformed

    private void rbCompanyRegistrationNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCompanyRegistrationNumberActionPerformed
        txtCriterionValue.setEnabled(true);
        cmbCities.setEnabled(false);
    }//GEN-LAST:event_rbCompanyRegistrationNumberActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Client client = modelSearchClient.getClient(selectedRow);

            IMyForm imf = Controler.getInstance().getCurrentForm();

            PanelNewOrder panelNewOrder = (PanelNewOrder) Session.getInstance().getUseCaseParams().get("panelNewOrder");
            PanelOrders panelOrders = (PanelOrders) Session.getInstance().getUseCaseParams().get("panelOrders");
            Session.getInstance().getUseCaseParams().put("selectedClient", client);

            if (panelNewOrder != null) {
                panelNewOrder.fillClient(client);
            }
            if (panelOrders != null) {
                panelOrders.fillClient(client);
            }

            ((JDialog) Controler.getInstance().getCurrentForm()).dispose();
            //Controler.getInstance().setCurrentForm(null);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelClient getModelSearchClient() {
        return modelSearchClient;
    }

    public void setModelSearchClient(TableModelClient modelSearchClient) {
        this.modelSearchClient = modelSearchClient;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbCities;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblChoose;
    private javax.swing.JLabel lblChooseCriterion;
    private javax.swing.JLabel lblCriterionValue;
    private javax.swing.JRadioButton rbAdress;
    private javax.swing.JRadioButton rbAll;
    private javax.swing.JRadioButton rbCity;
    private javax.swing.JRadioButton rbClientCode;
    private javax.swing.JRadioButton rbCompanyName;
    private javax.swing.JRadioButton rbCompanyRegistrationNumber;
    private javax.swing.JRadioButton rbEmail;
    private javax.swing.JRadioButton rbIDNumber;
    private javax.swing.JRadioButton rbTelephone;
    private javax.swing.JTable tblSearchClients;
    private javax.swing.JTextField txtCriterionValue;
    // End of variables declaration//GEN-END:variables

    private void prepareTable() {
        ArrayList<Client> list = new ArrayList<>();
        modelSearchClient = new TableModelClient(list);
        tblSearchClients.setModel(modelSearchClient);

        for (int i = modelSearchClient.getColumnCount() - 1; i >= 0; i--) {
            TableColumn column = tblSearchClients.getColumnModel().getColumn(i);
            switch (i) {
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(105);
                    break;
                case 2:
                    column.setPreferredWidth(65);
                    break;
                case 3:
                    column.setPreferredWidth(100);
                    break;
            }
        }
    }

    private void prepareOptions() {
        rbAll.setSelected(true);
        txtCriterionValue.setEnabled(false);
        cmbCities.setEnabled(false);
        btnChoose.setVisible(false);
    }

    private void requestCities() {
        ClientRequest cr = new ClientRequest();
        if (Session.getInstance().getCurrentUseCase().equals("Search clients")) {
            Session.getInstance().getUseCaseParams().put("request city", "PanelSearchClient");
        }
        if (Session.getInstance().getCurrentUseCase().equals("Select client")) {
            Session.getInstance().getUseCaseParams().put("request city", "PanelSelectClient");
        }
        cr.setOperation(Operation.GET_ALL_CITIES);
        Communication.getInstance().sendRequest(cr);
    }

    public void populateCMBCities(ArrayList<City> cities) {
        cmbCities.removeAllItems();
        for (City city : cities) {
            cmbCities.addItem(city);
        }
    }

    public ArrayList<City> getCitiesFromCMB() {
        ArrayList<City> list = new ArrayList<>();
        for (int i = 0; i < cmbCities.getItemCount(); i++) {
            City c = (City) cmbCities.getItemAt(i);
            list.add(c);
        }
        return list;
    }

    private String getCriterion() throws Exception {
        String criterion = "";
        if (!rbAll.isSelected()) {
            String criterionName = "";
            String criterionValue = "";

            if (!rbCity.isSelected()) {
                criterionValue = txtCriterionValue.getText();
                if (criterionValue == null || criterionValue.equals("")) {
                    throw new Exception("Nije unet kriterijum pretrage");
                }
                if (rbClientCode.isSelected()) {
                    validateClientCode(criterionValue);
                    criterionName = "cl.clientCode";
                    criterionValue = " LIKE '%" + criterionValue + "%'";
                }
                if (rbCompanyRegistrationNumber.isSelected()) {
                    criterionName = "le.companyRegistrationNumber";
                    criterionValue = " LIKE '%" + criterionValue + "%'";
                }
                if (rbCompanyName.isSelected()) {
                    criterionName = "le.companyName";
                    criterionValue = " LIKE '%" + criterionValue + "%'";
                }
                if (rbIDNumber.isSelected()) {
                    criterionName = "i.idNumber";
                    criterionValue = " LIKE '%" + criterionValue + "%'";
                }
                if (rbTelephone.isSelected()) {
                    criterionName = "cl.telephone";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";
                }
                if (rbEmail.isSelected()) {
                    criterionName = "cl.email";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";
                }
                if (rbAdress.isSelected()) {
                    criterionName = "cl.adress";
                    criterionValue = " LIKE '%" + criterionValue.toLowerCase() + "%'";
                }
            } else {
                if (rbCity.isSelected()) {
                    criterionName = "c.cityID";
                    City c = (City) cmbCities.getSelectedItem();
                    validationCity(c);
                    criterionValue = " = '" + c.getCityID() + "'";
                }
            }
            criterion = criterionName + criterionValue;
        }
        return criterion;
    }

    private int getSelectedRow() throws Exception {
        int selectedRow = tblSearchClients.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Please, select row");
            throw new Exception("Niste selektovali naručioca.");
        }
        return selectedRow;
    }

    public void setListForModelSearchClient(ArrayList<Client> clients) {
        modelSearchClient.setClients(clients);

        if (!modelSearchClient.getClients().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pronađena je lista naručilaca!",
                    "Status", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Naručilac nije pronađen za zadati kriterijum!",
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void validationCity(City c) throws Exception {
        if (c == null) {
            throw new Exception("Niste odabrali grad");
        }
    }

    private void validateClientCode(String criterionValue) throws Exception {
        if (criterionValue.length() != 6) {
            throw new Exception("Šifra naručioca mora imati 6 znakova!");
        } else {
            String productCode = criterionValue;
            int counter = 0;
            for (int i = 0; i < productCode.length(); i++) {
                if (Character.isDigit(productCode.charAt(i))) {
                    counter++;
                }
            }
            if (counter == 0) {
                throw new Exception("Šifra naručioca mora sadržati barem jedan broj!");
            }
        }
    }

    public void setBtnChoose() {
        btnChoose.setVisible(true);
    }

    public void setBtn() {
        btnChoose.setVisible(true);
        btnDetails.setVisible(false);
    }

}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.client;

import communication.Communication;
import constants.Operation;
import domain.City;
import domain.Client;
import domain.Individual;
import domain.LegalEntity;
import domain.domainEnum.ClientType;
import form.FormMain;
import form.FormMode;
import java.awt.Window;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import logic.Controler;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author Rados
 */
public class PanelClient extends javax.swing.JPanel {

    private JDialog ancestor;
    FormMode mode;
    private Client client;

    /**
     * Creates new form panelClient
     *
     * @param mode
     * @param ancestor
     */
    public PanelClient(FormMode mode, JDialog ancestor) {
        initComponents();
        this.mode = mode;
        this.ancestor = ancestor;
        Controler.getInstance().getFormMain().setPanelClient(this);
        requestCities();
        adjustForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rbIndividual = new javax.swing.JRadioButton();
        rbLegalEntity = new javax.swing.JRadioButton();
        pnlIndividual = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        lblSurname = new javax.swing.JLabel();
        lblIDNumber = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtSurname = new javax.swing.JTextField();
        txtIDNumber = new javax.swing.JTextField();
        pnlLegalEntity = new javax.swing.JPanel();
        lblCompanyName = new javax.swing.JLabel();
        lblCompanyRegistrationNumber = new javax.swing.JLabel();
        txtCompanyName = new javax.swing.JTextField();
        txtCompanyRegistrationNumber = new javax.swing.JTextField();
        lblTelephone = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblAdress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtTelephone = new javax.swing.JTextField();
        cmbCities = new javax.swing.JComboBox();
        txtAdress = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        lblClientCode = new javax.swing.JLabel();
        txtClientCode = new javax.swing.JTextField();

        buttonGroup1.add(rbIndividual);
        rbIndividual.setText("Fizičko lice");
        rbIndividual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbIndividualActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbLegalEntity);
        rbLegalEntity.setText("Privatno lice");
        rbLegalEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLegalEntityActionPerformed(evt);
            }
        });

        lblName.setText("Ime:");

        lblSurname.setText("Prezime:");

        lblIDNumber.setText("Broj lične karte:");

        javax.swing.GroupLayout pnlIndividualLayout = new javax.swing.GroupLayout(pnlIndividual);
        pnlIndividual.setLayout(pnlIndividualLayout);
        pnlIndividualLayout.setHorizontalGroup(
            pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIndividualLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblName)
                    .addComponent(lblSurname)
                    .addComponent(lblIDNumber))
                .addGap(21, 21, 21)
                .addGroup(pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                    .addComponent(txtSurname)
                    .addComponent(txtIDNumber))
                .addContainerGap())
        );
        pnlIndividualLayout.setVerticalGroup(
            pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIndividualLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSurname)
                    .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlIndividualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIDNumber)
                    .addComponent(txtIDNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCompanyName.setText("Ime kompanije:");

        lblCompanyRegistrationNumber.setText("Registracioni broj kompanije:");

        javax.swing.GroupLayout pnlLegalEntityLayout = new javax.swing.GroupLayout(pnlLegalEntity);
        pnlLegalEntity.setLayout(pnlLegalEntityLayout);
        pnlLegalEntityLayout.setHorizontalGroup(
            pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLegalEntityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCompanyName)
                    .addComponent(lblCompanyRegistrationNumber))
                .addGap(22, 22, 22)
                .addGroup(pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                    .addComponent(txtCompanyRegistrationNumber))
                .addContainerGap())
        );
        pnlLegalEntityLayout.setVerticalGroup(
            pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLegalEntityLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCompanyName)
                    .addComponent(txtCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlLegalEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCompanyRegistrationNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCompanyRegistrationNumber))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        lblTelephone.setText("Telefon:");

        lblEmail.setText("Email:");

        lblAdress.setText("Adresa:");

        lblCity.setText("Grad:");

        cmbCities.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnEdit.setText("Ažuriraj");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnUpdate.setText("Izmeni");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnSave.setText("Dodaj naručioca");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lblClientCode.setText("Šifra naručioca:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlLegalEntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTelephone)
                            .addComponent(lblAdress)
                            .addComponent(lblEmail)
                            .addComponent(lblCity)
                            .addComponent(lblClientCode))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTelephone, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbCities, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtClientCode)
                            .addComponent(txtAdress))
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(rbIndividual)
                        .addGap(103, 103, 103)
                        .addComponent(rbLegalEntity))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbLegalEntity)
                    .addComponent(rbIndividual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlIndividual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlLegalEntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblClientCode)
                            .addComponent(txtClientCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTelephone))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbCities, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCity)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnEdit)
                        .addGap(47, 47, 47)
                        .addComponent(btnUpdate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAdress))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        this.mode = FormMode.EDIT;
        adjustForm();
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        client = (Client) Session.getInstance().getUseCaseParams().get("client");
        ClientRequest cr = new ClientRequest();
        cr.setOperation(Operation.UPDATE_CLIENT);
        try {
            validation();
            String clientCode = client.getClientCode();
            String telephone = txtTelephone.getText();
            String email = txtEmail.getText().trim();
            String adress = txtAdress.getText();
            City city = (City) cmbCities.getSelectedItem();
            int id = client.getClientID();
            if (client.getClientType().equals(ClientType.individual)) {
                pnlIndividual.setVisible(true);
                String name = txtName.getText().trim();
                String surname = txtSurname.getText().trim();
                int idNumber = Integer.parseInt(txtIDNumber.getText().trim());
                client = new Individual(id, clientCode, telephone, email, adress, city, ClientType.individual, name, surname, idNumber);
                Session.getInstance().getUseCaseParams().put("client", client);
                cr.setParameter(client);
            }
            if (client.getClientType().equals(ClientType.legalEntity)) {
                pnlLegalEntity.setVisible(true);
                String companyName = txtCompanyName.getText();
                String companyRegistrationNumber = txtCompanyRegistrationNumber.getText().trim();
                client = new LegalEntity(id, clientCode, telephone, email, adress, city, ClientType.legalEntity, companyRegistrationNumber, companyName);
                Session.getInstance().getUseCaseParams().put("client", client);
                cr.setParameter(client);
            }

            Communication.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da izmeni podatke o naručiocu." + ex.getMessage(), "Greška!",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        switch (mode) {
            case EDIT:
                mode = FormMode.VIEW;
                adjustForm();
                break;
            case NEW:
            case VIEW:
                Controler.getInstance().setActiveWindow((Window) ancestor.getParent());
                Controler.getInstance().getFormMain().setPanelClient(null);
                ancestor.dispose();
                break;
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        ClientRequest cr = new ClientRequest();
        cr.setOperation(Operation.ADD_CLIENT);
        try {
            validation();
            String clientCode = txtClientCode.getText().trim();
            String telephone = txtTelephone.getText();
            String email = txtEmail.getText().trim();
            City city = (City) cmbCities.getSelectedItem();
            String adress = txtAdress.getText();

            if (rbIndividual.isSelected()) {
                pnlIndividual.setVisible(true);
                String name = txtName.getText().trim();
                String surname = txtSurname.getText().trim();
                int idNumber = Integer.parseInt(txtIDNumber.getText().trim());
                client = new Individual(0, clientCode, telephone, email, adress, city, ClientType.individual, name, surname, idNumber);
                cr.setParameter(client);
            }

            if (rbLegalEntity.isSelected()) {
                pnlLegalEntity.setVisible(true);
                String companyRegistrationNumber = txtCompanyRegistrationNumber.getText().trim();
                String companyName = txtCompanyName.getText();
                client = new LegalEntity(0, clientCode, telephone, email, adress, city, ClientType.legalEntity, companyRegistrationNumber, companyName);
                cr.setParameter(client);
            }
            Communication.getInstance().sendRequest(cr);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void rbIndividualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbIndividualActionPerformed
        resetFieldsIndividual();
        pnlIndividual.setVisible(true);
        pnlLegalEntity.setVisible(false);
    }//GEN-LAST:event_rbIndividualActionPerformed

    private void rbLegalEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLegalEntityActionPerformed
        resetFieldsLegalEntity();
        pnlLegalEntity.setVisible(true);
        pnlIndividual.setVisible(false);
    }//GEN-LAST:event_rbLegalEntityActionPerformed

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbCities;
    private javax.swing.JLabel lblAdress;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblClientCode;
    private javax.swing.JLabel lblCompanyName;
    private javax.swing.JLabel lblCompanyRegistrationNumber;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblIDNumber;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSurname;
    private javax.swing.JLabel lblTelephone;
    private javax.swing.JPanel pnlIndividual;
    private javax.swing.JPanel pnlLegalEntity;
    private javax.swing.JRadioButton rbIndividual;
    private javax.swing.JRadioButton rbLegalEntity;
    private javax.swing.JTextField txtAdress;
    private javax.swing.JTextField txtClientCode;
    private javax.swing.JTextField txtCompanyName;
    private javax.swing.JTextField txtCompanyRegistrationNumber;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtIDNumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSurname;
    private javax.swing.JTextField txtTelephone;
    // End of variables declaration//GEN-END:variables

    public void resetForNewClient() {
        resetTextField();
    }

    private void resetTextField() {
        txtClientCode.setText("");
        txtEmail.setText("");
        txtTelephone.setText("");
        txtAdress.setText("");
        rbIndividual.setSelected(true);
        resetFieldsIndividual();
        resetFieldsLegalEntity();
    }

    private void resetFieldsIndividual() {
        txtName.setText("");
        txtSurname.setText("");
        txtIDNumber.setText("");
    }

    private void resetFieldsLegalEntity() {
        txtCompanyName.setText("");
        txtCompanyRegistrationNumber.setText("");
    }

    private void requestCities() {
        FormMain formMain = Controler.getInstance().getFormMain();
        if (formMain.getPanelSearchClient() != null) {
            ArrayList<City> list = formMain.getPanelSearchClient().getCitiesFromCMB();
            populateCMBCities(list);
        } else {
            ClientRequest cr = new ClientRequest();
            Session.getInstance().getUseCaseParams().put("request city", "PanelClient");
            cr.setOperation(Operation.GET_ALL_CITIES);
            Communication.getInstance().sendRequest(cr);
        }
    }

    public void populateCMBCities(ArrayList<City> cities) {
        cmbCities.removeAllItems();
        for (City city : cities) {
            cmbCities.addItem(city);
        }
    }

    private void adjustForm() {
        switch (mode) {
            case NEW:
                resetForNewClient();
                btnSave.setVisible(true);
                btnEdit.setVisible(false);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);
                pnlLegalEntity.setVisible(false);

                setTitle("Unos novog naručioca");
                break;
            case VIEW:
                rbIndividual.setEnabled(false);
                rbLegalEntity.setEnabled(false);

                txtName.setEnabled(false);
                txtSurname.setEnabled(false);
                txtIDNumber.setEnabled(false);

                txtCompanyName.setEnabled(false);
                txtCompanyRegistrationNumber.setEnabled(false);

                txtClientCode.setEnabled(false);
                txtEmail.setEnabled(false);
                txtTelephone.setEnabled(false);
                cmbCities.setEnabled(false);
                txtAdress.setEnabled(false);

                btnSave.setVisible(false);
                btnEdit.setVisible(true);
                btnUpdate.setVisible(false);
                btnCancel.setVisible(true);
                btnCancel.setText("Izadji");
                setTitle("Pregled naručilaca");
                setClient();
                break;
            case EDIT:
                rbIndividual.setEnabled(false);
                rbLegalEntity.setEnabled(false);

                txtName.setEnabled(true);
                txtSurname.setEnabled(true);
                txtIDNumber.setEnabled(false);

                txtCompanyName.setEnabled(true);
                txtCompanyRegistrationNumber.setEnabled(false);

                txtClientCode.setEnabled(false);
                txtEmail.setEnabled(true);
                txtTelephone.setEnabled(true);
                cmbCities.setEnabled(true);
                txtAdress.setEnabled(true);

                btnSave.setVisible(false);
                btnEdit.setVisible(false);
                btnUpdate.setVisible(true);
                btnCancel.setVisible(true);
                btnCancel.setText("Odustani");
                setTitle("Izmena naručioca");
                break;
        }
    }

    private void setTitle(String title) {
        ancestor.setTitle(title);
    }

    private void setClient() {
        Client c = (Client) Session.getInstance().getUseCaseParams().get("client");
        txtClientCode.setText(c.getClientCode());
        txtEmail.setText(c.getEmail());
        txtTelephone.setText(c.getTelephone());
        cmbCities.setSelectedItem(c.getCity());
        txtAdress.setText(c.getAdress());
        if (c.getClientType().equals(ClientType.individual)) {
            Individual i = (Individual) c;
            rbIndividual.setSelected(true);
            txtName.setText(i.getName());
            txtSurname.setText(i.getSurname());
            txtIDNumber.setText(i.getIdNumber() + "");
            pnlLegalEntity.setVisible(false);
        }
        if (c.getClientType().equals(ClientType.legalEntity)) {
            LegalEntity le = (LegalEntity) c;
            rbLegalEntity.setSelected(true);
            txtCompanyName.setText(le.getCompanyName());
            txtCompanyRegistrationNumber.setText(le.getCompanyRegistrationNumber() + "");
            pnlIndividual.setVisible(false);
        }
    }

    private void validation() throws Exception {
        if (txtClientCode.getText().isEmpty() || txtClientCode.getText().equals("")) {
            throw new Exception("Nije uneta šifra naručioca!");
        } else if (txtClientCode.getText().length() != 6) {
            throw new Exception("Šifra naručioca mora imati 6 znakova!");
        } else {
            String productCode = txtClientCode.getText();
            int counter = 0;
            for (int i = 0; i < productCode.length(); i++) {
                if (Character.isDigit(productCode.charAt(i))) {
                    counter++;
                }
            }
            if (counter == 0) {
                throw new Exception("Šifra naručioca mora sadržati barem jedan broj!");
            }
        }

        if (txtTelephone.getText().isEmpty() || txtTelephone.getText().equals("")) {
            throw new Exception("Nije unet telefon");
        }
        if (txtEmail.getText().isEmpty() || txtEmail.getText().equals("")) {
            throw new Exception("Nije unet email");
        } else {
            String email = txtEmail.getText();
            if (!email.contains("@")) {
                throw new Exception("Email nije u odgovarajućem formatu");
            }
        }

        if (txtAdress.getText().isEmpty() || txtAdress.getText().equals("")) {
            throw new Exception("Nije uneta adresa");
        }
        if (cmbCities.getSelectedIndex() == -1) {
            throw new Exception("Niste odabrali grad");
        }

        if (rbIndividual.isSelected()) {
            if (txtName.getText().isEmpty() || txtName.getText().equals("")) {
                throw new Exception("Nije uneto ime");
            }
            if (txtSurname.getText().isEmpty() || txtSurname.getText().equals("")) {
                throw new Exception("Nije uneto prezime");
            }
            if (txtSurname.getText().isEmpty() || txtSurname.getText().equals("")) {
                throw new Exception("Nije unet broj lične karte");
            } else if (txtIDNumber.getText().length() != 8) {
                throw new Exception("Broj lične karte mora imati 8 brojeva!");
            }
        }
        if (rbLegalEntity.isSelected()) {
            if (txtCompanyRegistrationNumber.getText().isEmpty() || txtCompanyRegistrationNumber.getText().equals("")) {
                throw new Exception("Nije unet registracioni broj kompanije");
            } else if (txtCompanyRegistrationNumber.getText().length() != 6) {
                throw new Exception("Šifra kompanije mora imati 6 znakova!");
            }
            if (txtCompanyName.getText().isEmpty() || txtCompanyName.getText().equals("")) {
                throw new Exception("Nije uneto ime kompanije");
            }
        }

    }
}

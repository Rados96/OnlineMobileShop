/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.order;

import communication.Communication;
import constants.Operation;
import domain.Client;
import domain.Individual;
import domain.LegalEntity;
import domain.Order;
import domain.OrderItem;
import domain.domainEnum.ClientType;
import form.client.PanelSearchClient;
import form.components.IMyForm;
import form.components.MyForm;
import form.order.model.TableModelOrder;
import form.order.model.item.TableModelOrderItem;
import java.awt.Window;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import logic.Controler;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;
import session.Session;
import transfer.ClientRequest;
import util.DateFormatter;

/**
 *
 * @author Rados
 */
public class PanelOrders extends javax.swing.JPanel {

    private JDialog ancestor;
    private TableModelOrder modelOrder;
    private TableModelOrderItem modelOrderItem;
    private PanelSearchClient panelSearchClient;
    private Client client;
    Connection con;
    PreparedStatement ps;

    /**
     * Creates new form PanelOrders
     *
     * @param ancestor
     */
    public PanelOrders(JDialog ancestor) {
        this.ancestor = ancestor;
        initComponents();
        prepareTableOrder();
        prepareTableOrderItem();
        requestOrders();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblOrders = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblOrderItems = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        txtDate = new javax.swing.JTextField();
        lblClient = new javax.swing.JLabel();
        txtSelectedClient = new javax.swing.JTextField();
        btnSelectClient = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnReport = new javax.swing.JButton();

        lblOrders.setText("Narudžbine:");

        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrders);

        btnAdd.setText("Dodaj narudžbu");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Obriši narudžbu");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblOrderItems.setText("Stavke date narudžbe:");

        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblOrderItems);

        btnRefresh.setText("Osveži");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnCancel.setText("Izađi");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblDate.setText("Datum:");

        lblClient.setText("Naručilac:");

        txtSelectedClient.setEditable(false);

        btnSelectClient.setText("Izaberi naručioca");
        btnSelectClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectClientActionPerformed(evt);
            }
        });

        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnReport.setText("Izveštaj");
        btnReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 712, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnRefresh))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblOrderItems)
                                        .addGap(323, 323, 323))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblOrders)
                                        .addGap(179, 179, 179)))
                                .addComponent(btnSearch)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDate)
                            .addComponent(lblClient))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDate)
                            .addComponent(txtSelectedClient, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(btnSelectClient)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(53, 53, 53)
                .addComponent(btnAdd)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblClient)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSelectedClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSelectClient)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOrders)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd))
                .addGap(15, 15, 15)
                .addComponent(lblOrderItems)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel)
                            .addComponent(btnRefresh)
                            .addComponent(btnReport))
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Order order = modelOrder.getOrder(selectedRow);
            Session.getInstance().getUseCaseParams().put("order", order);

            ClientRequest cr = new ClientRequest();
            cr.setOperation(Operation.DELETE_ORDER);
            cr.setParameter(order);
            Communication.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        JDialog dialog = new JDialog(ancestor, "Unos nove narudžbe", true);
        Controler.getInstance().setActiveWindow(dialog);

        PanelNewOrder panel = new PanelNewOrder(dialog);
        dialog.add(panel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Controler.getInstance().setActiveWindow((Window) ancestor.getParent());
        Controler.getInstance().getFormMain().setPanelOrders(null);
        ancestor.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtDate.setText("");
        txtSelectedClient.setText("");
        requestOrders();
        modelOrderItem.setOrderItems(new ArrayList<>());
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tblOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdersMouseClicked
        try {
            int row = getSelectedRow();
            Order o = modelOrder.getOrder(row);
            modelOrderItem.setOrderItems(o.getOrderItems());
            if (o.getOrderItems().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Nema stavki za ovu narudžbu.", "Status", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            modelOrderItem.setOrderItems(new ArrayList<>());
        }
    }//GEN-LAST:event_tblOrdersMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
            String criterion = getCriterion();
            ClientRequest cr = new ClientRequest();
            if (criterion.equals("")) {
                cr.setOperation(Operation.GET_ALL_ORDERS);
                Session.getInstance().getUseCaseParams().put("request order", "PanelSearchOrder");
            } else {
                cr.setOperation(Operation.SEARCH_ORDERS);
                System.out.println(criterion);
                cr.setParameter(criterion);
            }
            Communication.getInstance().sendRequest(cr);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greška",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReportActionPerformed
        try {
            int selectedRow = getSelectedRow();
            Order order = modelOrder.getOrder(selectedRow);

            HashMap a = new HashMap();
            a.put("orderID", order.getOrderID());

            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/onlinemobileshop", "root", "");

            JasperDesign jdesign = JRXmlLoader.load("C:\\Users\\samar\\Desktop\\Diplomski\\OnlineMoblieShop\\ProjectClient\\src\\form\\order\\report\\report.jrxml");
            //String query = "select * from `order`";
            // where orderID = " + order.getOrderID();

            //JRDesignQuery updateQuery = new JRDesignQuery();
            //updateQuery.setText(query);
            //con.close();
            //jdesign.setQuery(updateQuery);

            JasperReport jreport = JasperCompileManager.compileReport(jdesign);
            JasperPrint jprint = JasperFillManager.fillReport(jreport, a, con);
            
            JasperViewer.viewReport(jprint);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnReportActionPerformed

    private void btnSelectClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectClientActionPerformed
        Session.getInstance().getUseCaseParams().put("request city", "PanelSelectClient");
        Session.getInstance().getUseCaseParams().put("request client", "PanelSelectClient");
        Session.getInstance().getUseCaseParams().put("panelOrders", this);

        Session.getInstance().setCurrentUseCase("Select client");
        panelSearchClient = new PanelSearchClient(ancestor);
        panelSearchClient.setBtn();
        JDialog dialog = new MyForm(panelSearchClient, "Pretraga i izbor naručilaca", true);
        dialog.add(panelSearchClient);

        Controler.getInstance().setCurrentForm((IMyForm) dialog);
        prepareDialog(dialog);
    }//GEN-LAST:event_btnSelectClientActionPerformed

    public PanelSearchClient getPanelSearchClient() {
        return panelSearchClient;
    }

    public void setPanelSearchClient(PanelSearchClient panelSearchClient) {
        this.panelSearchClient = panelSearchClient;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnReport;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblOrderItems;
    private javax.swing.JLabel lblOrders;
    private javax.swing.JTable tblOrderItems;
    private javax.swing.JTable tblOrders;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtSelectedClient;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    public TableModelOrder getModelOrder() {
        return modelOrder;
    }

    public void setModelOrder(TableModelOrder modelOrder) {
        this.modelOrder = modelOrder;
    }

    public TableModelOrderItem getModelOrderItem() {
        return modelOrderItem;
    }

    public void setModelOrderItem(TableModelOrderItem modelOrderItem) {
        this.modelOrderItem = modelOrderItem;
    }

    private void prepareTableOrder() {
        ArrayList<Order> list = new ArrayList<>();
        modelOrder = new TableModelOrder(list);
        tblOrders.setModel(modelOrder);
    }

    private void prepareTableOrderItem() {
        ArrayList<OrderItem> list = new ArrayList<>();
        modelOrderItem = new TableModelOrderItem(list);
        tblOrderItems.setModel(modelOrderItem);
        tblOrderItems.setEnabled(false);

        for (int i = modelOrderItem.getColumnCount() - 1; i >= 0; i--) {
            TableColumn column = tblOrderItems.getColumnModel().getColumn(i);
            switch (i) {
                case 0:
                    column.setPreferredWidth(40);
                    break;
                case 1:
                    column.setPreferredWidth(65);
                    break;
                case 2:
                    column.setPreferredWidth(100);
                    break;
                case 3:
                    column.setPreferredWidth(100);
                    break;
                case 4:
                    column.setPreferredWidth(50);
                    break;
                case 5:
                    column.setPreferredWidth(60);
                    break;
                case 6:
                    column.setPreferredWidth(50);
                    break;
            }
        }
    }

    public void requestOrders() {
        ClientRequest cr = new ClientRequest();
        cr.setOperation(Operation.GET_ALL_ORDERS);
        Communication.getInstance().sendRequest(cr);
    }

    private int getSelectedRow() throws Exception {
        int selectedRow = tblOrders.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Please, select row!");
            throw new Exception("Morate odabrati red.");
        }
        return selectedRow;
    }

    private String getCriterion() throws Exception {
        String criterion = "";
        String criterionName = "";
        String criterionValue = "";
        if ((!txtDate.getText().isEmpty() || !txtDate.getText().equals("")) && (!txtSelectedClient.getText().isEmpty() || !txtSelectedClient.getText().equals(""))) {
            Date date = DateFormatter.stringToDateApp(txtDate.getText());
            int clientID = client.getClientID();
            criterion = "o.date = '" + DateFormatter.dateToStringDB(date) + "' AND o.clientID = " + clientID;
            return criterion;
        } else {
            if (!txtDate.getText().isEmpty() || !txtDate.getText().equals("")) {
                Date date = DateFormatter.stringToDateApp(txtDate.getText());
                criterionName = "o.date";
                criterionValue = " = '" + DateFormatter.dateToStringDB(date) + "'";
            }
            if (!txtSelectedClient.getText().isEmpty() || !txtSelectedClient.getText().equals("")) {
                int clientID = client.getClientID();
                criterionName = "o.clientID";
                criterionValue = " = '" + clientID + "'";
            }
        }
        criterion = criterionName + criterionValue;
        return criterion;
    }

    public void setListForModelOrders(ArrayList<Order> orders) {
        modelOrder.setOrders(orders);

        if (!modelOrder.getOrders().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Pronađena je lista narudžba!",
                    "Status", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Narudžba nije pronađena za zadati kriterijum!",
                    "Greška", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void prepareDialog(JDialog dialog) {
        Controler.getInstance().setActiveWindow(dialog);

        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }

    public void fillClient(Client client) {
        if (client.getClientType().equals(ClientType.individual)) {
            Individual i = (Individual) client;
            txtSelectedClient.setText(i + "");
        }
        if (client.getClientType().equals(ClientType.legalEntity)) {
            LegalEntity le = (LegalEntity) client;
            txtSelectedClient.setText(le + "");
        }
        this.client = client;
    }

}

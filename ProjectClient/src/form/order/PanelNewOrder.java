/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form.order;

import communication.Communication;
import constants.Operation;
import domain.Client;
import domain.Individual;
import domain.LegalEntity;
import domain.Order;
import domain.OrderItem;
import domain.Seller;
import domain.domainEnum.ClientType;
import form.client.PanelSearchClient;
import form.components.IMyForm;
import form.components.MyForm;
import form.order.model.item.TableModelOrderItem;
import java.awt.Window;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import logic.Controler;
import session.Session;
import transfer.ClientRequest;

/**
 *
 * @author Rados
 */
public class PanelNewOrder extends javax.swing.JPanel {

    private JDialog ancestor;
    TableModelOrderItem modelOrderItems;
    PanelSearchClient panelSearchClient;
    PanelNewOrderItem panelNewOrderItem;
    Seller seller = Session.getInstance().getLoggedSeller();
    Client client;

    /**
     * Creates new form PanelNewOrder
     *
     * @param ancestor
     */
    public PanelNewOrder(JDialog ancestor) {
        this.ancestor = ancestor;
        Controler.getInstance().getFormMain().setPanelNewOrder(this);

        initComponents();
        prepareForm();

    }

    public PanelNewOrderItem getPanelNewOrderItem() {
        return panelNewOrderItem;
    }

    public void setPanelNewOrderItem(PanelNewOrderItem panelNewOrderItem) {
        this.panelNewOrderItem = panelNewOrderItem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblClient = new javax.swing.JLabel();
        btnSelectClient = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrderItems = new javax.swing.JTable();
        btnAddOrderItem = new javax.swing.JButton();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnSacuvaj = new javax.swing.JButton();
        lblTotalPrice = new javax.swing.JLabel();
        txtTotalPrice = new javax.swing.JTextField();
        btnCancel = new javax.swing.JButton();
        lblSeller = new javax.swing.JLabel();
        lblSelectedClient = new javax.swing.JLabel();
        txtSelectedClient = new javax.swing.JTextField();

        lblClient.setText("Naručilac: ");

        btnSelectClient.setText("Izaberi naručioca");
        btnSelectClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectClientActionPerformed(evt);
            }
        });

        tblOrderItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblOrderItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblOrderItemsKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrderItems);

        btnAddOrderItem.setText("Dodaj stavku");
        btnAddOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOrderItemActionPerformed(evt);
            }
        });

        btnRemoveOrderItem.setText("Obriši stavku");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnSacuvaj.setText("Sačuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        lblTotalPrice.setText("Ukupan iznos:");

        txtTotalPrice.setEditable(false);

        btnCancel.setText("Odustani");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblSeller.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        lblSeller.setText("Prodavac:");

        lblSelectedClient.setText("Izabran naručilac:");

        txtSelectedClient.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(btnAddOrderItem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnRemoveOrderItem)
                        .addGap(259, 259, 259))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTotalPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(377, 377, 377)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblSeller)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblClient)
                            .addComponent(lblSelectedClient))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnSelectClient, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSelectedClient, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSacuvaj)
                        .addGap(36, 36, 36))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSeller)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSelectClient)
                        .addComponent(lblClient)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSelectedClient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSelectedClient))
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddOrderItem)
                    .addComponent(btnRemoveOrderItem))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalPrice)
                    .addComponent(txtTotalPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSacuvaj))
                .addContainerGap(45, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancel();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnAddOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOrderItemActionPerformed
        Session.getInstance().getUseCaseParams().put("panelNewOrder", this);

        panelNewOrderItem = new PanelNewOrderItem(ancestor);
        JDialog dialog = new MyForm(panelNewOrderItem, "Izbor stavki narudzbe", true);
        dialog.add(panelNewOrderItem);
        Controler.getInstance().setCurrentForm((IMyForm) dialog);
        prepareDialog(dialog);


    }//GEN-LAST:event_btnAddOrderItemActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        try {
            int selectedRow = getSelectedRow(tblOrderItems);
            modelOrderItems.removeOrderItem(selectedRow);
            reorderOrderItems();
            
            TableModelOrderItem tmoi = (TableModelOrderItem) tblOrderItems.getModel();
            ArrayList<OrderItem> orderItems = tmoi.getOrderItems();
            calculateTotalPrice(orderItems);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnSelectClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectClientActionPerformed
        Session.getInstance().getUseCaseParams().put("request city", "PanelSelectClient");
        Session.getInstance().getUseCaseParams().put("request client", "PanelSelectClient");
        Session.getInstance().getUseCaseParams().put("panelNewOrder", this);

        Session.getInstance().setCurrentUseCase("Select client");
        panelSearchClient = new PanelSearchClient(ancestor);
        panelSearchClient.setBtn();
        JDialog dialog = new MyForm(panelSearchClient, "Pretraga i izbor naručilaca", true);
        dialog.add(panelSearchClient);

        Controler.getInstance().setCurrentForm((IMyForm) dialog);
        prepareDialog(dialog);
    }//GEN-LAST:event_btnSelectClientActionPerformed

    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        ClientRequest cr = new ClientRequest();
        cr.setOperation(Operation.ADD_ORDER);
        try{
            validation();
            TableModelOrderItem tmoi = (TableModelOrderItem) tblOrderItems.getModel();
            ArrayList<OrderItem> orderItems = tmoi.getOrderItems();
            Double totalPriceOrder = Double.parseDouble(txtTotalPrice.getText());
            Order o = new Order(0, new Date(), client, totalPriceOrder, seller, orderItems);
            cr.setParameter(o);
            Communication.getInstance().sendRequest(cr);
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void tblOrderItemsKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblOrderItemsKeyReleased
        TableModelOrderItem tmoi = (TableModelOrderItem) tblOrderItems.getModel();
        ArrayList<OrderItem> listOrderItems = tmoi.getOrderItems();
        double totalPrice = 0;
        for (OrderItem oi : listOrderItems) {
            totalPrice += oi.getPrice();
        }
        txtTotalPrice.setText(totalPrice + "");
    }//GEN-LAST:event_tblOrderItemsKeyReleased

    public PanelSearchClient getPanelSearchClient() {
        return panelSearchClient;
    }

    public void setPanelSearchClient(PanelSearchClient panelSearchClient) {
        this.panelSearchClient = panelSearchClient;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddOrderItem;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JButton btnSelectClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblSelectedClient;
    private javax.swing.JLabel lblSeller;
    private javax.swing.JLabel lblTotalPrice;
    private javax.swing.JTable tblOrderItems;
    private javax.swing.JTextField txtSelectedClient;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables

    public JDialog getAncestor() {
        return ancestor;
    }

    public void setAncestor(JDialog ancestor) {
        this.ancestor = ancestor;
    }

    private void prepareForm() {
        lblSeller.setText("Prodavac: " + seller);
        txtTotalPrice.setEditable(false);
        lblSelectedClient.setVisible(false);
        txtSelectedClient.setVisible(false);
        prepareTableOrderItems();
    }

    public void resetForNewOrder() {
        txtSelectedClient.setText("");
        txtTotalPrice.setText("");
        modelOrderItems.removeOrderItems();
    }

    public void cancel() {
        Controler.getInstance().setActiveWindow((Window) ancestor.getParent());
        Controler.getInstance().getFormMain().setPanelNewOrder(null);
        ancestor.dispose();
    }

    private void prepareTableOrderItems() {
        ArrayList<OrderItem> list = new ArrayList<>();
        modelOrderItems = new TableModelOrderItem(list);
        tblOrderItems.setModel(modelOrderItems);
    }

    private int getSelectedRow(JTable tblOrderItems) throws Exception {
        int selectedRow = tblOrderItems.getSelectedRow();
        if (selectedRow == -1) {
            System.out.println("Please, select row.");
            throw new Exception("Niste odabrali stavku narudzbenice");
        }
        return selectedRow;
    }

    private void reorderOrderItems() {
        ArrayList<OrderItem> list = modelOrderItems.getOrderItems();
        for (int i = 0; i < list.size(); i++) {
            list.get(i).setSerialNumber(i + 1);
        }
    }

    private void prepareDialog(JDialog dialog) {
        Controler.getInstance().setActiveWindow(dialog);

        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);
    }

    void addOrderItem(OrderItem oi) {
        TableModelOrderItem tmoi = (TableModelOrderItem) tblOrderItems.getModel();
        ArrayList<OrderItem> orderItems = tmoi.getOrderItems();
        for (OrderItem orderItem : orderItems) {
            if(orderItem.getProduct().equals(oi.getProduct())){
                int quantityNew = orderItem.getQuantity()+oi.getQuantity();
                orderItem.setQuantity(quantityNew);
                double priceNew = orderItem.getPrice() + oi.getPrice();
                orderItem.setPrice(priceNew);
                calculateTotalPrice(orderItems);
                tmoi.setOrderItems(orderItems);
                return;
            }
        }
        tmoi.add(oi);
        orderItems = tmoi.getOrderItems();
        calculateTotalPrice(orderItems);
    }

    public void fillClient(Client client) {
        this.client = client;
        lblSelectedClient.setVisible(true);
        txtSelectedClient.setVisible(true);
         if (client.getClientType().equals(ClientType.individual)) {
            Individual i = (Individual) client;
            txtSelectedClient.setText(i + "");
        }
        if (client.getClientType().equals(ClientType.legalEntity)) {
            LegalEntity le = (LegalEntity) client;
            txtSelectedClient.setText(le + "");
        }
    }

    public void calculateTotalPrice(ArrayList<OrderItem> orderItems) {
        double totalPrice = 0;
        for (OrderItem orderItem : orderItems) {
            totalPrice+= orderItem.getPrice();
        }
        txtTotalPrice.setText(totalPrice+"");
    }

    private void validation() throws Exception {
        if(txtSelectedClient.getText().isEmpty() || txtSelectedClient.getText().equals("")){
            throw new Exception("Nije izabran naručilac!");
        }
        if(Double.parseDouble(txtTotalPrice.getText())<=0){
            throw new Exception("Cena narudžbe mora biti veća od 0!");
        }
        TableModelOrderItem tmoi = (TableModelOrderItem) tblOrderItems.getModel();
        if(tmoi.getOrderItems().isEmpty()){
            throw new Exception("Narudžba mora imati barem jednu stavku!");
        }
    }

   



}
